def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
//    compileSdkVersion flutter.compileSdkVersion.toInteger()
//    targetSdkVersion flutter.targetSdkVersion.toInteger()
//    ndkVersion flutter.ndkVersion.toInteger()

    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled false
    }

//    lintOptions {
//        disable 'InvalidPackage'
//        checkReleaseBuilds false
//    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {

        def marketApplicationId = "ir.mservices.market"
        def marketBindAddress = "ir.mservices.market.InAppBillingService.BIND"
        manifestPlaceholders += [marketApplicationId: "${marketApplicationId}",
                                 marketBindAddress  : "${marketBindAddress}",
                                 marketPermission   : "${marketApplicationId}.BILLING"]
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.varta.hamsignal"
        minSdkVersion localProperties.getProperty('flutter.minSdkVersion').toInteger()
        targetSdkVersion localProperties.getProperty('flutter.targetSdkVersion').toInteger()
        compileSdkVersion localProperties.getProperty('flutter.compileSdkVersion').toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
//            useProguard true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.release
//            signingConfig signingConfigs.debug
        }
        debug {
            multiDexEnabled true
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
    implementation 'com.unity3d.ads:unity-ads:4.6.0'
    // For chartboost
    implementation 'com.chartboost:chartboost-sdk:9.2.1'
//    implementation("com.google.android.gms:play-services-ads-identifier:18.0.1") {
//        exclude group: 'com.android.support'
//    }
    // For adcolony
    implementation 'com.adcolony:sdk:4.8.0'

    // For applovin
    implementation 'com.applovin:applovin-sdk:11.8.2'
}
